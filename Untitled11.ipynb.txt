{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "6ls2x7xTTNR9"
      },
      "outputs": [],
      "source": [
        "# Install required packages\n",
        "!pip install -q gradio textblob\n",
        "\n",
        "# Import libraries\n",
        "import pandas as pd\n",
        "import re\n",
        "from textblob import TextBlob\n",
        "import nltk\n",
        "import gradio as gr\n",
        "from sklearn.feature_extraction.text import TfidfVectorizer\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.naive_bayes import MultinomialNB\n",
        "from sklearn.metrics import classification_report\n",
        "\n",
        "# Download stopwords\n",
        "nltk.download('stopwords')\n",
        "from nltk.corpus import stopwords\n",
        "stop_words = set(stopwords.words('english'))\n",
        "\n",
        "# Upload CSV file\n",
        "from google.colab import files\n",
        "uploaded = files.upload()\n",
        "\n",
        "# Load the uploaded CSV file\n",
        "filename = list(uploaded.keys())[0]\n",
        "df = pd.read_csv(filename, encoding='utf-8', errors='ignore')\n",
        "\n",
        "# Ensure there's a 'text' column\n",
        "if 'text' not in df.columns:\n",
        "    raise ValueError(\"Your CSV must contain a 'text' column with social media text.\")\n",
        "\n",
        "    # Drop rows with missing text\n",
        "    df = df.dropna(subset=['text'])\n",
        "\n",
        "    # Preprocess function\n",
        "    def preprocess(text):\n",
        "        text = re.sub(r\"http\\S+|www\\S+|https\\S+\", '', text)\n",
        "            text = re.sub(r'@\\w+|#\\w+', '', text)\n",
        "                text = re.sub(r'\\W+', ' ', text.lower())\n",
        "                    return ' '.join([word for word in text.split() if word not in stop_words])\n",
        "\n",
        "                    # Clean the text\n",
        "                    df['cleaned_text'] = df['text'].astype(str).apply(preprocess)\n",
        "\n",
        "                    # Sentiment labeling with TextBlob\n",
        "                    def get_sentiment(text):\n",
        "                        polarity = TextBlob(text).sentiment.polarity\n",
        "                            if polarity > 0:\n",
        "                                    return 'positive'\n",
        "                                        elif polarity < 0:\n",
        "                                                return 'negative'\n",
        "                                                    else:\n",
        "                                                            return 'neutral'\n",
        "\n",
        "                                                            df['sentiment'] = df['cleaned_text'].apply(get_sentiment)\n",
        "\n",
        "                                                            # Feature extraction\n",
        "                                                            vectorizer = TfidfVectorizer(max_features=5000)\n",
        "                                                            X = vectorizer.fit_transform(df['cleaned_text'])\n",
        "                                                            y = df['sentiment']\n",
        "\n",
        "                                                            # Train-test split\n",
        "                                                            X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "\n",
        "                                                            # Train model\n",
        "                                                            model = MultinomialNB()\n",
        "                                                            model.fit(X_train, y_train)\n",
        "\n",
        "                                                            # Evaluation\n",
        "                                                            y_pred = model.predict(X_test)\n",
        "                                                            print(\"\\nModel Evaluation Report:\\n\")\n",
        "                                                            print(classification_report(y_test, y_pred))\n",
        "\n",
        "                                                            # Gradio prediction function\n",
        "                                                            def predict_sentiment(text):\n",
        "                                                                cleaned = preprocess(text)\n",
        "                                                                    vector = vectorizer.transform([cleaned])\n",
        "                                                                        prediction = model.predict(vector)[0]\n",
        "                                                                            return prediction\n",
        "\n",
        "                                                                            # Launch Gradio interface\n",
        "                                                                            gr.Interface(\n",
        "                                                                                fn=predict_sentiment,\n",
        "                                                                                    inputs=gr.Textbox(lines=4, placeholder=\"Enter social media text...\"),\n",
        "                                                                                        outputs=\"text\",\n",
        "                                                                                            title=\"Social Media Sentiment Analyzer\",\n",
        "                                                                                                description=\"Enter any tweet or post to get a sentiment prediction: Positive, Negative, or Neutral.\"\n",
        "                                                                                                ).launch(share=True)"
      ]
    }
  ]
}